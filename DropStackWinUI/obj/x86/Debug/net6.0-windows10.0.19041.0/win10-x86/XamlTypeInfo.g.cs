//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace DropStackWinUI
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
        private global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace DropStackWinUI.DropStackWinUI_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[70];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "WinUIEx.WindowEx";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[8] = "WinUIEx.Icon";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "WinUIEx.WindowState";
            _typeNameTable[11] = "System.Enum";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[14] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[15] = "WinUIEx.SystemBackdrop";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[18] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[19] = "DropStackWinUI.FileViews.ImageView";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Controls.WebView2";
            _typeNameTable[21] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[22] = "System.Uri";
            _typeNameTable[23] = "Microsoft.Web.WebView2.Core.CoreWebView2";
            _typeNameTable[24] = "Windows.UI.Color";
            _typeNameTable[25] = "DropStackWinUI.FileViews.PDFView";
            _typeNameTable[26] = "DropStackWinUI.FileViews.VideoView";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Controls.ParallaxView";
            _typeNameTable[28] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Controls.TeachingTip";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[32] = "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[34] = "System.Windows.Input.ICommand";
            _typeNameTable[35] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[38] = "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
            _typeNameTable[39] = "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
            _typeNameTable[40] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[41] = "Microsoft.UI.Xaml.Controls.Expander";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Controls.ExpandDirection";
            _typeNameTable[43] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[44] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[45] = "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
            _typeNameTable[46] = "Microsoft.UI.Xaml.Controls.RadioButtons";
            _typeNameTable[47] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[48] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[49] = "Int32";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Controls.NumberBox";
            _typeNameTable[51] = "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode";
            _typeNameTable[52] = "Windows.Globalization.NumberFormatting.INumberFormatter2";
            _typeNameTable[53] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
            _typeNameTable[54] = "Microsoft.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[55] = "Microsoft.UI.Xaml.TextReadingOrder";
            _typeNameTable[56] = "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode";
            _typeNameTable[57] = "Microsoft.UI.Xaml.Controls.ProgressBar";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Controls.Primitives.RangeBase";
            _typeNameTable[59] = "Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings";
            _typeNameTable[60] = "Microsoft.UI.Xaml.Controls.CommandBarFlyout";
            _typeNameTable[61] = "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>";
            _typeNameTable[62] = "Microsoft.UI.Xaml.Controls.ICommandBarElement";
            _typeNameTable[63] = "Microsoft.UI.Xaml.Controls.ProgressRing";
            _typeNameTable[64] = "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
            _typeNameTable[65] = "DropStackWinUI.MainWindow";
            _typeNameTable[66] = "DropStackWinUI.MiniMode";
            _typeNameTable[67] = "DropStackWinUI.SimpleMode";
            _typeNameTable[68] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[69] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[70];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::WinUIEx.WindowEx);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[8] = typeof(global::WinUIEx.Icon);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::WinUIEx.WindowState);
            _typeTable[11] = typeof(global::System.Enum);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[14] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[15] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[18] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[19] = typeof(global::DropStackWinUI.FileViews.ImageView);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Controls.WebView2);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[22] = typeof(global::System.Uri);
            _typeTable[23] = typeof(global::Microsoft.Web.WebView2.Core.CoreWebView2);
            _typeTable[24] = typeof(global::Windows.UI.Color);
            _typeTable[25] = typeof(global::DropStackWinUI.FileViews.PDFView);
            _typeTable[26] = typeof(global::DropStackWinUI.FileViews.VideoView);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Controls.ParallaxView);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTip);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[34] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[35] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[38] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility);
            _typeTable[39] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings);
            _typeTable[40] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[41] = typeof(global::Microsoft.UI.Xaml.Controls.Expander);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection);
            _typeTable[43] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[44] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[45] = typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings);
            _typeTable[46] = typeof(global::Microsoft.UI.Xaml.Controls.RadioButtons);
            _typeTable[47] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[48] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[49] = typeof(global::System.Int32);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBox);
            _typeTable[51] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode);
            _typeTable[52] = typeof(global::Windows.Globalization.NumberFormatting.INumberFormatter2);
            _typeTable[53] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase);
            _typeTable[54] = typeof(global::Microsoft.UI.Xaml.Media.SolidColorBrush);
            _typeTable[55] = typeof(global::Microsoft.UI.Xaml.TextReadingOrder);
            _typeTable[56] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode);
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressBar);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase);
            _typeTable[59] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings);
            _typeTable[60] = typeof(global::Microsoft.UI.Xaml.Controls.CommandBarFlyout);
            _typeTable[61] = typeof(global::Windows.Foundation.Collections.IObservableVector<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>);
            _typeTable[62] = typeof(global::Microsoft.UI.Xaml.Controls.ICommandBarElement);
            _typeTable[63] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRing);
            _typeTable[64] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings);
            _typeTable[65] = typeof(global::DropStackWinUI.MainWindow);
            _typeTable[66] = typeof(global::DropStackWinUI.MiniMode);
            _typeTable[67] = typeof(global::DropStackWinUI.SimpleMode);
            _typeTable[68] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[69] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_16_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_20_WebView2() { return new global::Microsoft.UI.Xaml.Controls.WebView2(); }
        private object Activate_27_ParallaxView() { return new global::Microsoft.UI.Xaml.Controls.ParallaxView(); }
        private object Activate_30_TeachingTip() { return new global::Microsoft.UI.Xaml.Controls.TeachingTip(); }
        private object Activate_39_TeachingTipTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings(); }
        private object Activate_41_Expander() { return new global::Microsoft.UI.Xaml.Controls.Expander(); }
        private object Activate_46_RadioButtons() { return new global::Microsoft.UI.Xaml.Controls.RadioButtons(); }
        private object Activate_50_NumberBox() { return new global::Microsoft.UI.Xaml.Controls.NumberBox(); }
        private object Activate_57_ProgressBar() { return new global::Microsoft.UI.Xaml.Controls.ProgressBar(); }
        private object Activate_60_CommandBarFlyout() { return new global::Microsoft.UI.Xaml.Controls.CommandBarFlyout(); }
        private object Activate_63_ProgressRing() { return new global::Microsoft.UI.Xaml.Controls.ProgressRing(); }
        private object Activate_65_MainWindow() { return new global::DropStackWinUI.MainWindow(); }
        private object Activate_66_MiniMode() { return new global::DropStackWinUI.MiniMode(); }
        private object Activate_67_SimpleMode() { return new global::DropStackWinUI.SimpleMode(); }
        private object Activate_68_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_48_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_IObservableVector(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.ICommandBarElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_69_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WinUIEx.WindowEx
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_4_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("Title");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("WindowState");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Double
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  WinUIEx.Icon
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  WinUIEx.WindowState
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::WinUIEx.WindowState.Normal);
                userType.AddEnumValue("Minimized", global::WinUIEx.WindowState.Minimized);
                userType.AddEnumValue("Maximized", global::WinUIEx.WindowState.Maximized);
                xamlType = userType;
                break;

            case 11:   //  System.Enum
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 15:   //  WinUIEx.SystemBackdrop
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_16_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 17:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 19:   //  DropStackWinUI.FileViews.ImageView
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Xaml.Controls.WebView2
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_20_WebView2;
                userType.AddMemberName("Source");
                userType.AddMemberName("CanGoBack");
                userType.AddMemberName("CanGoForward");
                userType.AddMemberName("CoreWebView2");
                userType.AddMemberName("DefaultBackgroundColor");
                xamlType = userType;
                break;

            case 21:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Uri
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Microsoft.Web.WebView2.Core.CoreWebView2
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Color
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  DropStackWinUI.FileViews.PDFView
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  DropStackWinUI.FileViews.VideoView
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Controls.ParallaxView
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_27_ParallaxView;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ParallaxView.Child");
                userType.AddMemberName("Child");
                userType.AddMemberName("Source");
                userType.AddMemberName("VerticalShift");
                userType.AddMemberName("HorizontalShift");
                userType.AddMemberName("HorizontalSourceEndOffset");
                userType.AddMemberName("HorizontalSourceOffsetKind");
                userType.AddMemberName("HorizontalSourceStartOffset");
                userType.AddMemberName("IsHorizontalShiftClamped");
                userType.AddMemberName("IsVerticalShiftClamped");
                userType.AddMemberName("MaxHorizontalShiftRatio");
                userType.AddMemberName("MaxVerticalShiftRatio");
                userType.AddMemberName("VerticalSourceEndOffset");
                userType.AddMemberName("VerticalSourceOffsetKind");
                userType.AddMemberName("VerticalSourceStartOffset");
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Absolute", global::Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind.Absolute);
                userType.AddEnumValue("Relative", global::Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind.Relative);
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.Controls.TeachingTip
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_30_TeachingTip;
                userType.AddMemberName("PreferredPlacement");
                userType.AddMemberName("PlacementMargin");
                userType.AddMemberName("IsLightDismissEnabled");
                userType.AddMemberName("ActionButtonCommand");
                userType.AddMemberName("ActionButtonCommandParameter");
                userType.AddMemberName("ActionButtonContent");
                userType.AddMemberName("ActionButtonStyle");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonContent");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("HeroContent");
                userType.AddMemberName("HeroContentPlacement");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ShouldConstrainToRootBounds");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("TailVisibility");
                userType.AddMemberName("Target");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Title");
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Bottom);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Left);
                userType.AddEnumValue("Right", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Right);
                userType.AddEnumValue("TopRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopRight);
                userType.AddEnumValue("TopLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopLeft);
                userType.AddEnumValue("BottomRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomRight);
                userType.AddEnumValue("BottomLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomLeft);
                userType.AddEnumValue("LeftTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftTop);
                userType.AddEnumValue("LeftBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftBottom);
                userType.AddEnumValue("RightTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightTop);
                userType.AddEnumValue("RightBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightBottom);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Center);
                xamlType = userType;
                break;

            case 33:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.Windows.Input.ICommand
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom);
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Collapsed);
                xamlType = userType;
                break;

            case 39:   //  Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Microsoft.UI.Xaml.Controls.Expander
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_41_Expander;
                userType.AddMemberName("ExpandDirection");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Xaml.Controls.ExpandDirection
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Down", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Down);
                userType.AddEnumValue("Up", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Up);
                xamlType = userType;
                break;

            case 43:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  Microsoft.UI.Xaml.Controls.RadioButtons
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_46_RadioButtons;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.RadioButtons.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("MaxColumns");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 47:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_48_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  Int32
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Microsoft.UI.Xaml.Controls.NumberBox
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_50_NumberBox;
                userType.AddMemberName("SmallChange");
                userType.AddMemberName("LargeChange");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("SpinButtonPlacementMode");
                userType.AddMemberName("AcceptsExpression");
                userType.AddMemberName("Description");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsWrapEnabled");
                userType.AddMemberName("NumberFormatter");
                userType.AddMemberName("PlaceholderText");
                userType.AddMemberName("PreventKeyboardDisplayOnProgrammaticFocus");
                userType.AddMemberName("SelectionFlyout");
                userType.AddMemberName("SelectionHighlightColor");
                userType.AddMemberName("Text");
                userType.AddMemberName("TextReadingOrder");
                userType.AddMemberName("ValidationMode");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 51:   //  Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Hidden", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Hidden);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Compact);
                userType.AddEnumValue("Inline", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Inline);
                xamlType = userType;
                break;

            case 52:   //  Windows.Globalization.NumberFormatting.INumberFormatter2
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Microsoft.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Microsoft.UI.Xaml.TextReadingOrder
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 56:   //  Microsoft.UI.Xaml.Controls.NumberBoxValidationMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("InvalidInputOverwritten", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.InvalidInputOverwritten);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.Disabled);
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.Controls.ProgressBar
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_57_ProgressBar;
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("ShowError");
                userType.AddMemberName("ShowPaused");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 58:   //  Microsoft.UI.Xaml.Controls.Primitives.RangeBase
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 60:   //  Microsoft.UI.Xaml.Controls.CommandBarFlyout
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase"));
                userType.Activator = Activate_60_CommandBarFlyout;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.CommandBarFlyout.PrimaryCommands");
                userType.AddMemberName("PrimaryCommands");
                userType.AddMemberName("SecondaryCommands");
                userType.AddMemberName("AlwaysExpanded");
                xamlType = userType;
                break;

            case 61:   //  Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_61_IObservableVector;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  Microsoft.UI.Xaml.Controls.ICommandBarElement
                xamlType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  Microsoft.UI.Xaml.Controls.ProgressRing
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_63_ProgressRing;
                userType.AddMemberName("IsActive");
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 64:   //  Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  DropStackWinUI.MainWindow
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_65_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  DropStackWinUI.MiniMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_66_MiniMode;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  DropStackWinUI.SimpleMode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_67_SimpleMode;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 68:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_68_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 69:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_69_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::CommunityToolkit.WinUI.Controls.CameraPreviewRns.CommunityToolkit_WinUI_Controls_CameraPreview_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_1_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_2_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_2_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_3_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_3_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_4_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_5_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_5_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_6_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_6_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_7_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_7_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_8_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_8_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_9_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_9_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_10_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_10_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_11_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_11_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_12_WindowEx_WindowState(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowState;
        }
        private void set_12_WindowEx_WindowState(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowState = (global::WinUIEx.WindowState)Value;
        }
        private object get_13_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_13_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_14_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_14_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_15_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_16_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_16_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_17_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_17_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_18_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_18_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_19_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_19_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_20_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_20_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_21_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_21_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_22_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_22_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_23_WebView2_Source(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.Source;
        }
        private void set_23_WebView2_Source(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_24_WebView2_CanGoBack(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CanGoBack;
        }
        private void set_24_WebView2_CanGoBack(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.CanGoBack = (global::System.Boolean)Value;
        }
        private object get_25_WebView2_CanGoForward(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CanGoForward;
        }
        private void set_25_WebView2_CanGoForward(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.CanGoForward = (global::System.Boolean)Value;
        }
        private object get_26_WebView2_CoreWebView2(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.CoreWebView2;
        }
        private object get_27_WebView2_DefaultBackgroundColor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            return that.DefaultBackgroundColor;
        }
        private void set_27_WebView2_DefaultBackgroundColor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.WebView2)instance;
            that.DefaultBackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_28_ParallaxView_Child(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.Child;
        }
        private void set_28_ParallaxView_Child(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.Child = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_29_ParallaxView_Source(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.Source;
        }
        private void set_29_ParallaxView_Source(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.Source = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_30_ParallaxView_VerticalShift(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.VerticalShift;
        }
        private void set_30_ParallaxView_VerticalShift(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.VerticalShift = (global::System.Double)Value;
        }
        private object get_31_ParallaxView_HorizontalShift(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.HorizontalShift;
        }
        private void set_31_ParallaxView_HorizontalShift(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.HorizontalShift = (global::System.Double)Value;
        }
        private object get_32_ParallaxView_HorizontalSourceEndOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.HorizontalSourceEndOffset;
        }
        private void set_32_ParallaxView_HorizontalSourceEndOffset(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.HorizontalSourceEndOffset = (global::System.Double)Value;
        }
        private object get_33_ParallaxView_HorizontalSourceOffsetKind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.HorizontalSourceOffsetKind;
        }
        private void set_33_ParallaxView_HorizontalSourceOffsetKind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.HorizontalSourceOffsetKind = (global::Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind)Value;
        }
        private object get_34_ParallaxView_HorizontalSourceStartOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.HorizontalSourceStartOffset;
        }
        private void set_34_ParallaxView_HorizontalSourceStartOffset(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.HorizontalSourceStartOffset = (global::System.Double)Value;
        }
        private object get_35_ParallaxView_IsHorizontalShiftClamped(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.IsHorizontalShiftClamped;
        }
        private void set_35_ParallaxView_IsHorizontalShiftClamped(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.IsHorizontalShiftClamped = (global::System.Boolean)Value;
        }
        private object get_36_ParallaxView_IsVerticalShiftClamped(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.IsVerticalShiftClamped;
        }
        private void set_36_ParallaxView_IsVerticalShiftClamped(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.IsVerticalShiftClamped = (global::System.Boolean)Value;
        }
        private object get_37_ParallaxView_MaxHorizontalShiftRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.MaxHorizontalShiftRatio;
        }
        private void set_37_ParallaxView_MaxHorizontalShiftRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.MaxHorizontalShiftRatio = (global::System.Double)Value;
        }
        private object get_38_ParallaxView_MaxVerticalShiftRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.MaxVerticalShiftRatio;
        }
        private void set_38_ParallaxView_MaxVerticalShiftRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.MaxVerticalShiftRatio = (global::System.Double)Value;
        }
        private object get_39_ParallaxView_VerticalSourceEndOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.VerticalSourceEndOffset;
        }
        private void set_39_ParallaxView_VerticalSourceEndOffset(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.VerticalSourceEndOffset = (global::System.Double)Value;
        }
        private object get_40_ParallaxView_VerticalSourceOffsetKind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.VerticalSourceOffsetKind;
        }
        private void set_40_ParallaxView_VerticalSourceOffsetKind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.VerticalSourceOffsetKind = (global::Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind)Value;
        }
        private object get_41_ParallaxView_VerticalSourceStartOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            return that.VerticalSourceStartOffset;
        }
        private void set_41_ParallaxView_VerticalSourceStartOffset(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ParallaxView)instance;
            that.VerticalSourceStartOffset = (global::System.Double)Value;
        }
        private object get_42_TeachingTip_PreferredPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PreferredPlacement;
        }
        private void set_42_TeachingTip_PreferredPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PreferredPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode)Value;
        }
        private object get_43_TeachingTip_PlacementMargin(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PlacementMargin;
        }
        private void set_43_TeachingTip_PlacementMargin(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PlacementMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_44_TeachingTip_IsLightDismissEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_44_TeachingTip_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_45_TeachingTip_ActionButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommand;
        }
        private void set_45_TeachingTip_ActionButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_46_TeachingTip_ActionButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommandParameter;
        }
        private void set_46_TeachingTip_ActionButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_47_TeachingTip_ActionButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonContent;
        }
        private void set_47_TeachingTip_ActionButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonContent = (global::System.Object)Value;
        }
        private object get_48_TeachingTip_ActionButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonStyle;
        }
        private void set_48_TeachingTip_ActionButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_49_TeachingTip_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommand;
        }
        private void set_49_TeachingTip_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_50_TeachingTip_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_50_TeachingTip_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_51_TeachingTip_CloseButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonContent;
        }
        private void set_51_TeachingTip_CloseButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonContent = (global::System.Object)Value;
        }
        private object get_52_TeachingTip_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonStyle;
        }
        private void set_52_TeachingTip_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_53_TeachingTip_HeroContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContent;
        }
        private void set_53_TeachingTip_HeroContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_54_TeachingTip_HeroContentPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContentPlacement;
        }
        private void set_54_TeachingTip_HeroContentPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContentPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode)Value;
        }
        private object get_55_TeachingTip_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IconSource;
        }
        private void set_55_TeachingTip_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_56_TeachingTip_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsOpen;
        }
        private void set_56_TeachingTip_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_57_TeachingTip_ShouldConstrainToRootBounds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ShouldConstrainToRootBounds;
        }
        private void set_57_TeachingTip_ShouldConstrainToRootBounds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ShouldConstrainToRootBounds = (global::System.Boolean)Value;
        }
        private object get_58_TeachingTip_Subtitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Subtitle;
        }
        private void set_58_TeachingTip_Subtitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_59_TeachingTip_TailVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TailVisibility;
        }
        private void set_59_TeachingTip_TailVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.TailVisibility = (global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility)Value;
        }
        private object get_60_TeachingTip_Target(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Target;
        }
        private void set_60_TeachingTip_Target(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Target = (global::Microsoft.UI.Xaml.FrameworkElement)Value;
        }
        private object get_61_TeachingTip_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TemplateSettings;
        }
        private object get_62_TeachingTip_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Title;
        }
        private void set_62_TeachingTip_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_63_Expander_ExpandDirection(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.ExpandDirection;
        }
        private void set_63_Expander_ExpandDirection(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.ExpandDirection = (global::Microsoft.UI.Xaml.Controls.ExpandDirection)Value;
        }
        private object get_64_Expander_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.IsExpanded;
        }
        private void set_64_Expander_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_65_Expander_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.Header;
        }
        private void set_65_Expander_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_66_Expander_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplate;
        }
        private void set_66_Expander_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_67_Expander_HeaderTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_67_Expander_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_68_Expander_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.TemplateSettings;
        }
        private object get_69_RadioButtons_Items(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Items;
        }
        private object get_70_RadioButtons_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Header;
        }
        private void set_70_RadioButtons_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_71_RadioButtons_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.HeaderTemplate;
        }
        private void set_71_RadioButtons_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_72_RadioButtons_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemTemplate;
        }
        private void set_72_RadioButtons_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_73_RadioButtons_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemsSource;
        }
        private void set_73_RadioButtons_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_74_RadioButtons_MaxColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.MaxColumns;
        }
        private void set_74_RadioButtons_MaxColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.MaxColumns = (global::System.Int32)Value;
        }
        private object get_75_RadioButtons_SelectedIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedIndex;
        }
        private void set_75_RadioButtons_SelectedIndex(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_76_RadioButtons_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedItem;
        }
        private void set_76_RadioButtons_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_77_NumberBox_SmallChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SmallChange;
        }
        private void set_77_NumberBox_SmallChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SmallChange = (global::System.Double)Value;
        }
        private object get_78_NumberBox_LargeChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.LargeChange;
        }
        private void set_78_NumberBox_LargeChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.LargeChange = (global::System.Double)Value;
        }
        private object get_79_NumberBox_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Minimum;
        }
        private void set_79_NumberBox_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_80_NumberBox_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Maximum;
        }
        private void set_80_NumberBox_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_81_NumberBox_SpinButtonPlacementMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SpinButtonPlacementMode;
        }
        private void set_81_NumberBox_SpinButtonPlacementMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SpinButtonPlacementMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode)Value;
        }
        private object get_82_NumberBox_AcceptsExpression(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.AcceptsExpression;
        }
        private void set_82_NumberBox_AcceptsExpression(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.AcceptsExpression = (global::System.Boolean)Value;
        }
        private object get_83_NumberBox_Description(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Description;
        }
        private void set_83_NumberBox_Description(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_84_NumberBox_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Header;
        }
        private void set_84_NumberBox_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_85_NumberBox_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.HeaderTemplate;
        }
        private void set_85_NumberBox_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_86_NumberBox_IsWrapEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.IsWrapEnabled;
        }
        private void set_86_NumberBox_IsWrapEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.IsWrapEnabled = (global::System.Boolean)Value;
        }
        private object get_87_NumberBox_NumberFormatter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.NumberFormatter;
        }
        private void set_87_NumberBox_NumberFormatter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.NumberFormatter = (global::Windows.Globalization.NumberFormatting.INumberFormatter2)Value;
        }
        private object get_88_NumberBox_PlaceholderText(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PlaceholderText;
        }
        private void set_88_NumberBox_PlaceholderText(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PlaceholderText = (global::System.String)Value;
        }
        private object get_89_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PreventKeyboardDisplayOnProgrammaticFocus;
        }
        private void set_89_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PreventKeyboardDisplayOnProgrammaticFocus = (global::System.Boolean)Value;
        }
        private object get_90_NumberBox_SelectionFlyout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionFlyout;
        }
        private void set_90_NumberBox_SelectionFlyout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionFlyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_91_NumberBox_SelectionHighlightColor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionHighlightColor;
        }
        private void set_91_NumberBox_SelectionHighlightColor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionHighlightColor = (global::Microsoft.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_92_NumberBox_Text(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Text;
        }
        private void set_92_NumberBox_Text(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_93_NumberBox_TextReadingOrder(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.TextReadingOrder;
        }
        private void set_93_NumberBox_TextReadingOrder(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.TextReadingOrder = (global::Microsoft.UI.Xaml.TextReadingOrder)Value;
        }
        private object get_94_NumberBox_ValidationMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.ValidationMode;
        }
        private void set_94_NumberBox_ValidationMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.ValidationMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode)Value;
        }
        private object get_95_NumberBox_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Value;
        }
        private void set_95_NumberBox_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_96_ProgressBar_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.IsIndeterminate;
        }
        private void set_96_ProgressBar_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_97_ProgressBar_ShowError(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.ShowError;
        }
        private void set_97_ProgressBar_ShowError(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.ShowError = (global::System.Boolean)Value;
        }
        private object get_98_ProgressBar_ShowPaused(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.ShowPaused;
        }
        private void set_98_ProgressBar_ShowPaused(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.ShowPaused = (global::System.Boolean)Value;
        }
        private object get_99_ProgressBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.TemplateSettings;
        }
        private object get_100_CommandBarFlyout_PrimaryCommands(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.CommandBarFlyout)instance;
            return that.PrimaryCommands;
        }
        private object get_101_CommandBarFlyout_SecondaryCommands(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.CommandBarFlyout)instance;
            return that.SecondaryCommands;
        }
        private object get_102_CommandBarFlyout_AlwaysExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.CommandBarFlyout)instance;
            return that.AlwaysExpanded;
        }
        private void set_102_CommandBarFlyout_AlwaysExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.CommandBarFlyout)instance;
            that.AlwaysExpanded = (global::System.Boolean)Value;
        }
        private object get_103_ProgressRing_IsActive(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsActive;
        }
        private void set_103_ProgressRing_IsActive(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_104_ProgressRing_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsIndeterminate;
        }
        private void set_104_ProgressRing_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_105_ProgressRing_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Maximum;
        }
        private void set_105_ProgressRing_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_106_ProgressRing_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Minimum;
        }
        private void set_106_ProgressRing_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_107_ProgressRing_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.TemplateSettings;
        }
        private object get_108_ProgressRing_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Value;
        }
        private void set_108_ProgressRing_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_109_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_110_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_110_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_111_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_112_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_113_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_113_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_114_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_114_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_115_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember xamlMember = null;
            global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_1_WindowEx_WindowContent;
                xamlMember.Setter = set_1_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_2_WindowEx_MinHeight;
                xamlMember.Setter = set_2_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_3_WindowEx_MinWidth;
                xamlMember.Setter = set_3_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_4_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_5_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_5_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_6_WindowEx_Title;
                xamlMember.Setter = set_6_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_7_WindowEx_PersistenceId;
                xamlMember.Setter = set_7_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_8_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_8_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_9_WindowEx_IsMinimizable;
                xamlMember.Setter = set_9_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_10_WindowEx_IsMaximizable;
                xamlMember.Setter = set_10_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_11_WindowEx_IsResizable;
                xamlMember.Setter = set_11_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.WindowState":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "WindowState", "WinUIEx.WindowState");
                xamlMember.Getter = get_12_WindowEx_WindowState;
                xamlMember.Setter = set_12_WindowEx_WindowState;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_13_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_13_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_14_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_14_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_15_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_16_WindowEx_PresenterKind;
                xamlMember.Setter = set_16_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_17_WindowEx_Width;
                xamlMember.Setter = set_17_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_18_WindowEx_Height;
                xamlMember.Setter = set_18_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_19_WindowEx_MaxWidth;
                xamlMember.Setter = set_19_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_20_WindowEx_MaxHeight;
                xamlMember.Setter = set_20_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_21_WindowEx_Backdrop;
                xamlMember.Setter = set_21_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_MicaBackdrop_Kind;
                xamlMember.Setter = set_22_MicaBackdrop_Kind;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.Source":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_WebView2_Source;
                xamlMember.Setter = set_23_WebView2_Source;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CanGoBack":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_WebView2_CanGoBack;
                xamlMember.Setter = set_24_WebView2_CanGoBack;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CanGoForward":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_WebView2_CanGoForward;
                xamlMember.Setter = set_25_WebView2_CanGoForward;
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.CoreWebView2":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CoreWebView2", "Microsoft.Web.WebView2.Core.CoreWebView2");
                xamlMember.Getter = get_26_WebView2_CoreWebView2;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.WebView2.DefaultBackgroundColor":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.WebView2");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "DefaultBackgroundColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_WebView2_DefaultBackgroundColor;
                xamlMember.Setter = set_27_WebView2_DefaultBackgroundColor;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.Child":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Child", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ParallaxView_Child;
                xamlMember.Setter = set_28_ParallaxView_Child;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.Source":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Source", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_ParallaxView_Source;
                xamlMember.Setter = set_29_ParallaxView_Source;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.VerticalShift":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "VerticalShift", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_ParallaxView_VerticalShift;
                xamlMember.Setter = set_30_ParallaxView_VerticalShift;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.HorizontalShift":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HorizontalShift", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ParallaxView_HorizontalShift;
                xamlMember.Setter = set_31_ParallaxView_HorizontalShift;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.HorizontalSourceEndOffset":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HorizontalSourceEndOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ParallaxView_HorizontalSourceEndOffset;
                xamlMember.Setter = set_32_ParallaxView_HorizontalSourceEndOffset;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.HorizontalSourceOffsetKind":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HorizontalSourceOffsetKind", "Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ParallaxView_HorizontalSourceOffsetKind;
                xamlMember.Setter = set_33_ParallaxView_HorizontalSourceOffsetKind;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.HorizontalSourceStartOffset":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HorizontalSourceStartOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ParallaxView_HorizontalSourceStartOffset;
                xamlMember.Setter = set_34_ParallaxView_HorizontalSourceStartOffset;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.IsHorizontalShiftClamped":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsHorizontalShiftClamped", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ParallaxView_IsHorizontalShiftClamped;
                xamlMember.Setter = set_35_ParallaxView_IsHorizontalShiftClamped;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.IsVerticalShiftClamped":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsVerticalShiftClamped", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ParallaxView_IsVerticalShiftClamped;
                xamlMember.Setter = set_36_ParallaxView_IsVerticalShiftClamped;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.MaxHorizontalShiftRatio":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MaxHorizontalShiftRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ParallaxView_MaxHorizontalShiftRatio;
                xamlMember.Setter = set_37_ParallaxView_MaxHorizontalShiftRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.MaxVerticalShiftRatio":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MaxVerticalShiftRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ParallaxView_MaxVerticalShiftRatio;
                xamlMember.Setter = set_38_ParallaxView_MaxVerticalShiftRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.VerticalSourceEndOffset":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "VerticalSourceEndOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ParallaxView_VerticalSourceEndOffset;
                xamlMember.Setter = set_39_ParallaxView_VerticalSourceEndOffset;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.VerticalSourceOffsetKind":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "VerticalSourceOffsetKind", "Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ParallaxView_VerticalSourceOffsetKind;
                xamlMember.Setter = set_40_ParallaxView_VerticalSourceOffsetKind;
                break;
            case "Microsoft.UI.Xaml.Controls.ParallaxView.VerticalSourceStartOffset":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ParallaxView");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "VerticalSourceStartOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ParallaxView_VerticalSourceStartOffset;
                xamlMember.Setter = set_41_ParallaxView_VerticalSourceStartOffset;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PreferredPlacement":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PreferredPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_TeachingTip_PreferredPlacement;
                xamlMember.Setter = set_42_TeachingTip_PreferredPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PlacementMargin":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PlacementMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_TeachingTip_PlacementMargin;
                xamlMember.Setter = set_43_TeachingTip_PlacementMargin;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsLightDismissEnabled":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_TeachingTip_IsLightDismissEnabled;
                xamlMember.Setter = set_44_TeachingTip_IsLightDismissEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommand":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ActionButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_TeachingTip_ActionButtonCommand;
                xamlMember.Setter = set_45_TeachingTip_ActionButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommandParameter":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ActionButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_TeachingTip_ActionButtonCommandParameter;
                xamlMember.Setter = set_46_TeachingTip_ActionButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonContent":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ActionButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_TeachingTip_ActionButtonContent;
                xamlMember.Setter = set_47_TeachingTip_ActionButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonStyle":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ActionButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_TeachingTip_ActionButtonStyle;
                xamlMember.Setter = set_48_TeachingTip_ActionButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommand":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_TeachingTip_CloseButtonCommand;
                xamlMember.Setter = set_49_TeachingTip_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommandParameter":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_TeachingTip_CloseButtonCommandParameter;
                xamlMember.Setter = set_50_TeachingTip_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonContent":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_TeachingTip_CloseButtonContent;
                xamlMember.Setter = set_51_TeachingTip_CloseButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonStyle":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_TeachingTip_CloseButtonStyle;
                xamlMember.Setter = set_52_TeachingTip_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContent":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeroContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_TeachingTip_HeroContent;
                xamlMember.Setter = set_53_TeachingTip_HeroContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContentPlacement":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeroContentPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_TeachingTip_HeroContentPlacement;
                xamlMember.Setter = set_54_TeachingTip_HeroContentPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IconSource":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_TeachingTip_IconSource;
                xamlMember.Setter = set_55_TeachingTip_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsOpen":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_TeachingTip_IsOpen;
                xamlMember.Setter = set_56_TeachingTip_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ShouldConstrainToRootBounds", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_TeachingTip_ShouldConstrainToRootBounds;
                xamlMember.Setter = set_57_TeachingTip_ShouldConstrainToRootBounds;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Subtitle":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_TeachingTip_Subtitle;
                xamlMember.Setter = set_58_TeachingTip_Subtitle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TailVisibility":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TailVisibility", "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_TeachingTip_TailVisibility;
                xamlMember.Setter = set_59_TeachingTip_TailVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Target":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Target", "Microsoft.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_TeachingTip_Target;
                xamlMember.Setter = set_60_TeachingTip_Target;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TemplateSettings":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_TeachingTip_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Title":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_TeachingTip_Title;
                xamlMember.Setter = set_62_TeachingTip_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.ExpandDirection":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ExpandDirection", "Microsoft.UI.Xaml.Controls.ExpandDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_Expander_ExpandDirection;
                xamlMember.Setter = set_63_Expander_ExpandDirection;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.IsExpanded":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_Expander_IsExpanded;
                xamlMember.Setter = set_64_Expander_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.Header":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_Expander_Header;
                xamlMember.Setter = set_65_Expander_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_Expander_HeaderTemplate;
                xamlMember.Setter = set_66_Expander_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplateSelector":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_Expander_HeaderTemplateSelector;
                xamlMember.Setter = set_67_Expander_HeaderTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.TemplateSettings":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings");
                xamlMember.Getter = get_68_Expander_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Items":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_RadioButtons_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Header":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_RadioButtons_Header;
                xamlMember.Setter = set_70_RadioButtons_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.HeaderTemplate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_RadioButtons_HeaderTemplate;
                xamlMember.Setter = set_71_RadioButtons_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemTemplate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_RadioButtons_ItemTemplate;
                xamlMember.Setter = set_72_RadioButtons_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemsSource":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_RadioButtons_ItemsSource;
                xamlMember.Setter = set_73_RadioButtons_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.MaxColumns":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "MaxColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_RadioButtons_MaxColumns;
                xamlMember.Setter = set_74_RadioButtons_MaxColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedIndex":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_RadioButtons_SelectedIndex;
                xamlMember.Setter = set_75_RadioButtons_SelectedIndex;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedItem":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_RadioButtons_SelectedItem;
                xamlMember.Setter = set_76_RadioButtons_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SmallChange":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SmallChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_NumberBox_SmallChange;
                xamlMember.Setter = set_77_NumberBox_SmallChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.LargeChange":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "LargeChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_NumberBox_LargeChange;
                xamlMember.Setter = set_78_NumberBox_LargeChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Minimum":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_NumberBox_Minimum;
                xamlMember.Setter = set_79_NumberBox_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Maximum":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_NumberBox_Maximum;
                xamlMember.Setter = set_80_NumberBox_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SpinButtonPlacementMode":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SpinButtonPlacementMode", "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_NumberBox_SpinButtonPlacementMode;
                xamlMember.Setter = set_81_NumberBox_SpinButtonPlacementMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.AcceptsExpression":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "AcceptsExpression", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_NumberBox_AcceptsExpression;
                xamlMember.Setter = set_82_NumberBox_AcceptsExpression;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Description":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_NumberBox_Description;
                xamlMember.Setter = set_83_NumberBox_Description;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Header":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_NumberBox_Header;
                xamlMember.Setter = set_84_NumberBox_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.HeaderTemplate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_NumberBox_HeaderTemplate;
                xamlMember.Setter = set_85_NumberBox_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.IsWrapEnabled":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsWrapEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_NumberBox_IsWrapEnabled;
                xamlMember.Setter = set_86_NumberBox_IsWrapEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.NumberFormatter":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "NumberFormatter", "Windows.Globalization.NumberFormatting.INumberFormatter2");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_NumberBox_NumberFormatter;
                xamlMember.Setter = set_87_NumberBox_NumberFormatter;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PlaceholderText":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PlaceholderText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_NumberBox_PlaceholderText;
                xamlMember.Setter = set_88_NumberBox_PlaceholderText;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocus":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PreventKeyboardDisplayOnProgrammaticFocus", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                xamlMember.Setter = set_89_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionFlyout":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SelectionFlyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_NumberBox_SelectionFlyout;
                xamlMember.Setter = set_90_NumberBox_SelectionFlyout;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionHighlightColor":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SelectionHighlightColor", "Microsoft.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_NumberBox_SelectionHighlightColor;
                xamlMember.Setter = set_91_NumberBox_SelectionHighlightColor;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Text":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_NumberBox_Text;
                xamlMember.Setter = set_92_NumberBox_Text;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.TextReadingOrder":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TextReadingOrder", "Microsoft.UI.Xaml.TextReadingOrder");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_NumberBox_TextReadingOrder;
                xamlMember.Setter = set_93_NumberBox_TextReadingOrder;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.ValidationMode":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ValidationMode", "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_NumberBox_ValidationMode;
                xamlMember.Setter = set_94_NumberBox_ValidationMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Value":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_NumberBox_Value;
                xamlMember.Setter = set_95_NumberBox_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.IsIndeterminate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_ProgressBar_IsIndeterminate;
                xamlMember.Setter = set_96_ProgressBar_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.ShowError":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ShowError", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_ProgressBar_ShowError;
                xamlMember.Setter = set_97_ProgressBar_ShowError;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.ShowPaused":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "ShowPaused", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_ProgressBar_ShowPaused;
                xamlMember.Setter = set_98_ProgressBar_ShowPaused;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.TemplateSettings":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings");
                xamlMember.Getter = get_99_ProgressBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.CommandBarFlyout.PrimaryCommands":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.CommandBarFlyout");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "PrimaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.Getter = get_100_CommandBarFlyout_PrimaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.CommandBarFlyout.SecondaryCommands":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.CommandBarFlyout");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "SecondaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.Getter = get_101_CommandBarFlyout_SecondaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.CommandBarFlyout.AlwaysExpanded":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.CommandBarFlyout");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "AlwaysExpanded", "Boolean");
                xamlMember.Getter = get_102_CommandBarFlyout_AlwaysExpanded;
                xamlMember.Setter = set_102_CommandBarFlyout_AlwaysExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsActive":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_ProgressRing_IsActive;
                xamlMember.Setter = set_103_ProgressRing_IsActive;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsIndeterminate":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_ProgressRing_IsIndeterminate;
                xamlMember.Setter = set_104_ProgressRing_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Maximum":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_ProgressRing_Maximum;
                xamlMember.Setter = set_105_ProgressRing_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Minimum":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_ProgressRing_Minimum;
                xamlMember.Setter = set_106_ProgressRing_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.TemplateSettings":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings");
                xamlMember.Getter = get_107_ProgressRing_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Value":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_ProgressRing_Value;
                xamlMember.Setter = set_108_ProgressRing_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_109_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_TreeViewNode_Content;
                xamlMember.Setter = set_110_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_113_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_113_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_114_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_115_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2404")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::DropStackWinUI.DropStackWinUI_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

