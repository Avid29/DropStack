#pragma checksum "C:\Users\nicol\OneDrive\Documents\GitHub\DropStack-2\DropStackWinUI\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "C7128B72CEEA6FA51056F3AFF9B78457DF628B40C31B175EC82DB08233790F98"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DropStackWinUI
{
    partial class MainWindow : 
        global::WinUIEx.WindowEx, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(global::Microsoft.UI.Xaml.Controls.TeachingTip obj, global::Microsoft.UI.Xaml.FrameworkElement value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.FrameworkElement) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.FrameworkElement), targetNullValue);
                }
                obj.Target = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_FlyoutBase_AttachedFlyout(global::Microsoft.UI.Xaml.FrameworkElement obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase), targetNullValue);
                }
                global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase.SetAttachedFlyout(obj, value);
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_ContextFlyout(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase), targetNullValue);
                }
                obj.ContextFlyout = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::DropStackWinUI.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TeachingTip obj38;
            private global::Microsoft.UI.Xaml.Controls.TeachingTip obj39;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj53;
            private global::Microsoft.UI.Xaml.Controls.ListView obj137;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj38TargetDisabled = false;
            private static bool isobj39TargetDisabled = false;
            private static bool isobj53TextDisabled = false;
            private static bool isobj137AttachedFlyoutDisabled = false;
            private static bool isobj137ContextFlyoutDisabled = false;

            public MainWindow_obj1_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 328 && columnNumber == 10)
                {
                    isobj38TargetDisabled = true;
                }
                else if (lineNumber == 337 && columnNumber == 10)
                {
                    isobj39TargetDisabled = true;
                }
                else if (lineNumber == 652 && columnNumber == 56)
                {
                    isobj53TextDisabled = true;
                }
                else if (lineNumber == 156 && columnNumber == 41)
                {
                    isobj137AttachedFlyoutDisabled = true;
                }
                else if (lineNumber == 157 && columnNumber == 41)
                {
                    isobj137ContextFlyoutDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 38: // MainWindow.xaml line 324
                        this.obj38 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                        break;
                    case 39: // MainWindow.xaml line 333
                        this.obj39 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                        break;
                    case 53: // MainWindow.xaml line 652
                        this.obj53 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 137: // MainWindow.xaml line 146
                        this.obj137 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::DropStackWinUI.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_GetAppVersion_371857150(int phase)
            {
                global::System.String result = this.dataRoot.GetAppVersion();
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 652
                    if (!isobj53TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj53, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::DropStackWinUI.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_RevealInExplorerButton(obj.RevealInExplorerButton, phase);
                        this.Update_M_GetAppVersion_371857150(phase);
                        this.Update_FileCommandsFlyout(obj.FileCommandsFlyout, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_RevealInExplorerButton(global::Microsoft.UI.Xaml.Controls.AppBarButton obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 324
                    if (!isobj38TargetDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(this.obj38, obj, null);
                    }
                    // MainWindow.xaml line 333
                    if (!isobj39TargetDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(this.obj39, obj, null);
                    }
                }
            }
            private void Update_M_GetAppVersion_371857150(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    if (!isobj53TextDisabled)
                    {
                        this.PendingFunctionBindings["M_GetAppVersion_371857150"] = new InvokeFunctionDelegate(this.Invoke_M_GetAppVersion_371857150); 
                    }
                }
            }
            private void Update_FileCommandsFlyout(global::Microsoft.UI.Xaml.Controls.CommandBarFlyout obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 146
                    if (!isobj137AttachedFlyoutDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_FlyoutBase_AttachedFlyout(this.obj137, obj, null);
                    }
                    // MainWindow.xaml line 146
                    if (!isobj137ContextFlyoutDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_ContextFlyout(this.obj137, obj, null);
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainWindow.xaml line 20
                {
                    this.ThemeBackgroundParallaxView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ParallaxView>(target);
                }
                break;
            case 3: // MainWindow.xaml line 23
                {
                    this.WindowGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 4: // MainWindow.xaml line 717
                {
                    this.DetailsSheetGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.DetailsSheetGrid).ManipulationDelta += this.DetailsSheetGrid_ManipulationDelta;
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.DetailsSheetGrid).ManipulationCompleted += this.DetailsSheetGrid_ManipulationCompleted;
                }
                break;
            case 5: // MainWindow.xaml line 729
                {
                    this.DetailsSheetGrabberGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 6: // MainWindow.xaml line 763
                {
                    this.DetailsFileNameDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 7: // MainWindow.xaml line 785
                {
                    this.DetailsFileModifiedDateDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 8: // MainWindow.xaml line 787
                {
                    this.DetailsPaneCommandBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CommandBar>(target);
                }
                break;
            case 9: // MainWindow.xaml line 789
                {
                    this.DetailsPanePlayButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPanePlayButton).Click += this.DetailsPanePlayButton_Click;
                }
                break;
            case 10: // MainWindow.xaml line 790
                {
                    this.DetailsPaneAnnotateButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPaneAnnotateButton).Click += this.DetailsPaneAnnotateButton_Click;
                }
                break;
            case 11: // MainWindow.xaml line 791
                {
                    this.DetailsPaneCropButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPaneCropButton).Click += this.DetailsPaneCropButton_Click;
                }
                break;
            case 12: // MainWindow.xaml line 792
                {
                    this.DetailsPaneRotateButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPaneRotateButton).Click += this.DetailsPaneRotateButton_Click;
                }
                break;
            case 13: // MainWindow.xaml line 793
                {
                    this.DetailsPaneSeparator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarSeparator>(target);
                }
                break;
            case 14: // MainWindow.xaml line 794
                {
                    this.DetailsPanePreviewButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPanePreviewButton).Click += this.DetailsPanePreviewButton_Click;
                }
                break;
            case 15: // MainWindow.xaml line 795
                {
                    this.DetailsPaneOpenWithButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.DetailsPaneOpenWithButton).Click += this.DetailsPaneOpenWithButton_Click;
                }
                break;
            case 16: // MainWindow.xaml line 796
                {
                    this.DetailsPaneDeleteFlyoutButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                }
                break;
            case 17: // MainWindow.xaml line 798
                {
                    this.DeleteFlyout = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Flyout>(target);
                }
                break;
            case 18: // MainWindow.xaml line 801
                {
                    this.FileDeleteButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.FileDeleteButton).Click += this.FileDeleteButton_Click;
                }
                break;
            case 19: // MainWindow.xaml line 780
                {
                    this.DetailsFileSizeDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 20: // MainWindow.xaml line 781
                {
                    this.DetailsFileSizeSuffixDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 21: // MainWindow.xaml line 775
                {
                    this.DetailsFileTypeDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 22: // MainWindow.xaml line 765
                {
                    this.EnterKeyPressFileNameEdit = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Input.KeyboardAccelerator>(target);
                    ((global::Microsoft.UI.Xaml.Input.KeyboardAccelerator)this.EnterKeyPressFileNameEdit).Invoked += this.EnterKeyPressFileNameEdit_Invoked;
                }
                break;
            case 23: // MainWindow.xaml line 752
                {
                    this.DetailsPaneVideoPlayer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MediaPlayerElement>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MediaPlayerElement)this.DetailsPaneVideoPlayer).PointerEntered += this.DetailsPaneFileThumbnail_PointerEntered;
                    ((global::Microsoft.UI.Xaml.Controls.MediaPlayerElement)this.DetailsPaneVideoPlayer).PointerExited += this.DetailsPaneFileThumbnail_PointerExited;
                    ((global::Microsoft.UI.Xaml.Controls.MediaPlayerElement)this.DetailsPaneVideoPlayer).DoubleTapped += this.DetailsPaneFileThumbnail_DoubleTapped;
                }
                break;
            case 24: // MainWindow.xaml line 753
                {
                    this.DetailsPaneFileThumbnail = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Image)this.DetailsPaneFileThumbnail).Tapped += this.DetailsPaneFileThumbnail_Tapped;
                    ((global::Microsoft.UI.Xaml.Controls.Image)this.DetailsPaneFileThumbnail).PointerEntered += this.DetailsPaneFileThumbnail_PointerEntered;
                    ((global::Microsoft.UI.Xaml.Controls.Image)this.DetailsPaneFileThumbnail).PointerExited += this.DetailsPaneFileThumbnail_PointerExited;
                    ((global::Microsoft.UI.Xaml.Controls.Image)this.DetailsPaneFileThumbnail).DoubleTapped += this.DetailsPaneFileThumbnail_DoubleTapped;
                }
                break;
            case 25: // MainWindow.xaml line 731
                {
                    this.DetailsSheetResizeGrabber = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Rectangle>(target);
                }
                break;
            case 26: // MainWindow.xaml line 732
                {
                    this.DismissDetailsSheetButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.DismissDetailsSheetButton).Click += this.DismissDetailsSheetButton_Click;
                }
                break;
            case 27: // MainWindow.xaml line 31
                {
                    this.TitleBarRectangle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Rectangle>(target);
                }
                break;
            case 28: // MainWindow.xaml line 32
                {
                    this.TitleBarText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 29: // MainWindow.xaml line 33
                {
                    this.ContentGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 30: // MainWindow.xaml line 34
                {
                    this.RegularAndPinnedFileGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 31: // MainWindow.xaml line 202
                {
                    this.FileCommandBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CommandBar>(target);
                }
                break;
            case 32: // MainWindow.xaml line 277
                {
                    this.SearchGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 33: // MainWindow.xaml line 287
                {
                    this.fileInClipboardReminder = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                }
                break;
            case 34: // MainWindow.xaml line 293
                {
                    this.failedToDragTeachingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                }
                break;
            case 35: // MainWindow.xaml line 299
                {
                    this.panosUnlockedTeachingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.panosUnlockedTeachingTip).ActionButtonClick += this.panosUnlockedTeachingTip_ActionButtonClick;
                }
                break;
            case 36: // MainWindow.xaml line 306
                {
                    this.noFolderpathTechingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.noFolderpathTechingTip).ActionButtonClick += this.noFolderpathTechingTip_ActionButtonClick;
                }
                break;
            case 37: // MainWindow.xaml line 315
                {
                    this.noPinnedFolderpathTechingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.noPinnedFolderpathTechingTip).ActionButtonClick += this.noPinnedFolderpathTechingTip_ActionButtonClick;
                }
                break;
            case 38: // MainWindow.xaml line 324
                {
                    this.cannotOpenRegularFolderBecauseThereIsNoneTeachingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.cannotOpenRegularFolderBecauseThereIsNoneTeachingTip).ActionButtonClick += this.cannotOpenRegularFolderBecauseThereIsNoneTeachingTip_ActionButtonClick;
                }
                break;
            case 39: // MainWindow.xaml line 333
                {
                    this.cannotOpenPinnedFolderBecauseThereIsNoneTeachingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.cannotOpenPinnedFolderBecauseThereIsNoneTeachingTip).ActionButtonClick += this.cannotOpenPinnedFolderBecauseThereIsNoneTeachingTip_ActionButtonClick;
                }
                break;
            case 40: // MainWindow.xaml line 343
                {
                    this.OOBEgrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 41: // MainWindow.xaml line 411
                {
                    this.AboutDropStackGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 42: // MainWindow.xaml line 417
                {
                    this.AboutDropStackContentGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 43: // MainWindow.xaml line 426
                {
                    this.AboutDropStackCloseButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.AboutDropStackCloseButton).Click += this.AboutDropStackCloseButton_Click;
                }
                break;
            case 44: // MainWindow.xaml line 431
                {
                    this.AppearanceAndBehaviorExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 45: // MainWindow.xaml line 488
                {
                    this.PerformanceSettingsExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 46: // MainWindow.xaml line 533
                {
                    this.SecondaryFolderSettingsExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 47: // MainWindow.xaml line 607
                {
                    this.ExpanderSettingsExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 48: // MainWindow.xaml line 619
                {
                    this.AboutDropStackExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 49: // MainWindow.xaml line 660
                {
                    this.PrivacyStamentExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Expander)this.PrivacyStamentExpander).Expanding += this.PrivacyStamentExpander_Expanding;
                }
                break;
            case 50: // MainWindow.xaml line 676
                {
                    this.AttributionExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 51: // MainWindow.xaml line 701
                {
                    this.FlagsExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                }
                break;
            case 52: // MainWindow.xaml line 708
                {
                    this.ShowDetailsPaneFlagButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ShowDetailsPaneFlagButton).Click += this.ShowDetailsPaneFlagButton_Click;
                }
                break;
            case 54: // MainWindow.xaml line 616
                {
                    this.EnableAllOptionsForPinsButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.EnableAllOptionsForPinsButton).Click += this.EnableAllOptionsForPinsButton_Click;
                }
                break;
            case 55: // MainWindow.xaml line 610
                {
                    this.PinsAlwaysOpenRadioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButton)this.PinsAlwaysOpenRadioButton).Checked += this.RadioButton_Checked;
                }
                break;
            case 56: // MainWindow.xaml line 611
                {
                    this.PinsRememberStateRadioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButton)this.PinsRememberStateRadioButton).Checked += this.RadioButton_Checked;
                }
                break;
            case 57: // MainWindow.xaml line 612
                {
                    this.PinsAlwaysClosedRadioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButton)this.PinsAlwaysClosedRadioButton).Checked += this.RadioButton_Checked;
                }
                break;
            case 58: // MainWindow.xaml line 613
                {
                    this.PinsProtectedRadioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButton)this.PinsProtectedRadioButton).Checked += this.RadioButton_Checked;
                }
                break;
            case 59: // MainWindow.xaml line 614
                {
                    this.PinsHiddenRadioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButton)this.PinsHiddenRadioButton).Checked += this.RadioButton_Checked;
                }
                break;
            case 60: // MainWindow.xaml line 561
                {
                    this.ApplyMultiFolderSettings = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ApplyMultiFolderSettings).Click += this.ApplyMultiFolderSettings_Click;
                }
                break;
            case 61: // MainWindow.xaml line 562
                {
                    this.deleteFolderCookieButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 62: // MainWindow.xaml line 570
                {
                    global::Microsoft.UI.Xaml.Controls.Flyout element62 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Flyout>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Flyout)element62).Opened += this.Flyout_Opened;
                }
                break;
            case 63: // MainWindow.xaml line 596
                {
                    global::Microsoft.UI.Xaml.Controls.Button element63 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element63).Click += this.disconnectFolderButton_Click;
                }
                break;
            case 64: // MainWindow.xaml line 591
                {
                    this.PinnedFolderPathDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 65: // MainWindow.xaml line 592
                {
                    this.CopyPinnedFolderPathButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.CopyPinnedFolderPathButton).Click += this.CopyPinnedFolderPathButton_Click;
                }
                break;
            case 66: // MainWindow.xaml line 581
                {
                    this.RegularFolderPathDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 67: // MainWindow.xaml line 582
                {
                    this.CopyRegularFolderPathButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.CopyRegularFolderPathButton).Click += this.CopyRegularFolderPathButton_Click;
                }
                break;
            case 68: // MainWindow.xaml line 548
                {
                    this.PrimaryPortalFolderCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.PrimaryPortalFolderCheckBox).Checked += this.PrimaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.PrimaryPortalFolderCheckBox).Unchecked += this.PrimaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 69: // MainWindow.xaml line 549
                {
                    this.SecondaryPortalFolder1CheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder1CheckBox).Checked += this.SecondaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder1CheckBox).Unchecked += this.SecondaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 70: // MainWindow.xaml line 550
                {
                    this.SecondaryPortalFolder2CheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder2CheckBox).Checked += this.SecondaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder2CheckBox).Unchecked += this.SecondaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 71: // MainWindow.xaml line 551
                {
                    this.SecondaryPortalFolder3CheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder3CheckBox).Checked += this.SecondaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder3CheckBox).Unchecked += this.SecondaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 72: // MainWindow.xaml line 552
                {
                    this.SecondaryPortalFolder4CheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder4CheckBox).Checked += this.SecondaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder4CheckBox).Unchecked += this.SecondaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 73: // MainWindow.xaml line 553
                {
                    this.SecondaryPortalFolder5CheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder5CheckBox).Checked += this.SecondaryPortalFolderCheckBox_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.SecondaryPortalFolder5CheckBox).Unchecked += this.SecondaryPortalFolderCheckBox_Unchecked;
                }
                break;
            case 74: // MainWindow.xaml line 554
                {
                    this.PrimaryPortalFolderChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.PrimaryPortalFolderChangeButton).Click += this.PrimaryPortalFolderChangeButton_Click;
                }
                break;
            case 75: // MainWindow.xaml line 555
                {
                    this.SecondaryPortalFolder1ChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SecondaryPortalFolder1ChangeButton).Click += this.SecondaryPortalFolderChangeButton_Click;
                }
                break;
            case 76: // MainWindow.xaml line 556
                {
                    this.SecondaryPortalFolder2ChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SecondaryPortalFolder2ChangeButton).Click += this.SecondaryPortalFolderChangeButton_Click;
                }
                break;
            case 77: // MainWindow.xaml line 557
                {
                    this.SecondaryPortalFolder3ChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SecondaryPortalFolder3ChangeButton).Click += this.SecondaryPortalFolderChangeButton_Click;
                }
                break;
            case 78: // MainWindow.xaml line 558
                {
                    this.SecondaryPortalFolder4ChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SecondaryPortalFolder4ChangeButton).Click += this.SecondaryPortalFolderChangeButton_Click;
                }
                break;
            case 79: // MainWindow.xaml line 559
                {
                    this.SecondaryPortalFolder5ChangeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SecondaryPortalFolder5ChangeButton).Click += this.SecondaryPortalFolderChangeButton_Click;
                }
                break;
            case 80: // MainWindow.xaml line 493
                {
                    this.RegularFileCapNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.NumberBox)this.RegularFileCapNumberBox).ValueChanged += this.RegularFileCapNumberBox_ValueChanged;
                }
                break;
            case 81: // MainWindow.xaml line 503
                {
                    this.ThumbnailCapNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.NumberBox)this.ThumbnailCapNumberBox).ValueChanged += this.ThumbnailCapNumberBox_ValueChanged;
                }
                break;
            case 82: // MainWindow.xaml line 514
                {
                    this.ThumbnailResolutionNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.NumberBox)this.ThumbnailResolutionNumberBox).ValueChanged += this.ThumbnailResolutionNumberBox_ValueChanged;
                }
                break;
            case 83: // MainWindow.xaml line 525
                {
                    this.ResetCapsToDefaultButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ResetCapsToDefaultButton).Click += this.ResetCapsToDefaultButton_Click;
                }
                break;
            case 84: // MainWindow.xaml line 433
                {
                    this.LaunchModePickerComboBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.LaunchModePickerComboBox).SelectionChanged += this.LaunchModePickerComboBox_SelectionChanged;
                }
                break;
            case 85: // MainWindow.xaml line 442
                {
                    this.SimpleModeWindowingToggle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.SimpleModeWindowingToggle).Toggled += this.SimpleModeWindowingToggle_Toggled;
                }
                break;
            case 86: // MainWindow.xaml line 447
                {
                    this.PinToolbarInSimpleModeToggleSwitch = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.PinToolbarInSimpleModeToggleSwitch).Toggled += this.PinToolbarInSimpleModeToggleSwitch_Toggled;
                }
                break;
            case 87: // MainWindow.xaml line 452
                {
                    this.CheckBoxBehaviorCombobox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.CheckBoxBehaviorCombobox).SelectionChanged += this.CheckBoxBehaviorCombobox_SelectionChanged;
                }
                break;
            case 88: // MainWindow.xaml line 457
                {
                    this.ThemePickerCombobox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.ThemePickerCombobox).SelectionChanged += this.ThemePickerCombobox_SelectionChanged;
                }
                break;
            case 89: // MainWindow.xaml line 466
                {
                    this.SearchThresholdNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.NumberBox)this.SearchThresholdNumberBox).ValueChanged += this.SearchThresholdNumberBox_ValueChanged;
                }
                break;
            case 90: // MainWindow.xaml line 480
                {
                    this.ShowDetailsPaneToggleSwitch = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.ShowDetailsPaneToggleSwitch).Toggled += this.ShowDetailsPaneToggleSwitch_Toggled;
                }
                break;
            case 91: // MainWindow.xaml line 350
                {
                    this.OOBEbackgroundRectangle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Rectangle>(target);
                }
                break;
            case 92: // MainWindow.xaml line 352
                {
                    this.OOBEpivot = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Pivot>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Pivot)this.OOBEpivot).SelectionChanged += this.OOBEpivot_SelectionChanged;
                }
                break;
            case 93: // MainWindow.xaml line 406
                {
                    this.OOBEgoBackButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.OOBEgoBackButton).Click += this.OOBEgoBackButton_Click;
                }
                break;
            case 94: // MainWindow.xaml line 407
                {
                    this.OOBEgoNextButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.OOBEgoNextButton).Click += this.OOBEgoNextButton_Click;
                }
                break;
            case 95: // MainWindow.xaml line 401
                {
                    this.OOBEsimpleViewOfferCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                }
                break;
            case 96: // MainWindow.xaml line 367
                {
                    this.OOBEsetupPivot = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Pivot>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Pivot)this.OOBEsetupPivot).SelectionChanged += this.OOBEsetupPivot_SelectionChanged;
                }
                break;
            case 97: // MainWindow.xaml line 388
                {
                    this.OOBEpinnedFileAccessRequestButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.OOBEpinnedFileAccessRequestButton).Click += this.OOBEpinnedFileAccessRequestButton_Click;
                }
                break;
            case 98: // MainWindow.xaml line 376
                {
                    this.OOBEportalFileAccessRequestButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.OOBEportalFileAccessRequestButton).Click += this.OOBEportalFileAccessRequestButton_Click;
                }
                break;
            case 99: // MainWindow.xaml line 304
                {
                    this.panosUnlockedTimer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressBar>(target);
                }
                break;
            case 100: // MainWindow.xaml line 297
                {
                    this.failureReminderTimer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressBar>(target);
                }
                break;
            case 101: // MainWindow.xaml line 291
                {
                    this.reminderTimer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressBar>(target);
                }
                break;
            case 102: // MainWindow.xaml line 285
                {
                    this.SearchTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBox)this.SearchTextBox).TextChanged += this.SearchTextBox_TextChanged;
                }
                break;
            case 103: // MainWindow.xaml line 203
                {
                    this.SearchButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.SearchButton).Click += this.SearchButton_Click;
                }
                break;
            case 104: // MainWindow.xaml line 209
                {
                    this.CopyLastSelectedButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.CopyLastSelectedButton).Click += this.CopyLastSelectedButton_Click;
                }
                break;
            case 105: // MainWindow.xaml line 215
                {
                    this.RefreshButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.RefreshButton).Click += this.RefreshButton_Click;
                }
                break;
            case 106: // MainWindow.xaml line 221
                {
                    this.RevealInExplorerButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                }
                break;
            case 107: // MainWindow.xaml line 240
                {
                    this.SelectModeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.SelectModeButton).Click += this.SelectModeButton_Click;
                }
                break;
            case 108: // MainWindow.xaml line 246
                {
                    this.LaunchSimpleModeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.LaunchSimpleModeButton).Click += this.LaunchSimpleModeButton_Click;
                }
                break;
            case 109: // MainWindow.xaml line 252
                {
                    this.LaunchMiniModeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.LaunchMiniModeButton).Click += this.LaunchMiniModeButton_Click;
                }
                break;
            case 110: // MainWindow.xaml line 258
                {
                    this.CopyRecentFileButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.CopyRecentFileButton).Click += this.CopyRecentFileButton_Click;
                }
                break;
            case 111: // MainWindow.xaml line 263
                {
                    this.OpenFileButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.OpenFileButton).Click += this.OpenFileButton_Click;
                }
                break;
            case 112: // MainWindow.xaml line 228
                {
                    this.PrimLinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.PrimLinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 113: // MainWindow.xaml line 230
                {
                    this.Sec1LinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.Sec1LinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 114: // MainWindow.xaml line 231
                {
                    this.Sec2LinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.Sec2LinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 115: // MainWindow.xaml line 232
                {
                    this.Sec3LinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.Sec3LinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 116: // MainWindow.xaml line 233
                {
                    this.Sec4LinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.Sec4LinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 117: // MainWindow.xaml line 234
                {
                    this.Sec5LinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.Sec5LinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 118: // MainWindow.xaml line 236
                {
                    this.PinsLinkToExplorerDisplay = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.PinsLinkToExplorerDisplay).Click += this.RevealInExplorerButton_Click;
                }
                break;
            case 119: // MainWindow.xaml line 270
                {
                    this.QuickSettingsButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.QuickSettingsButton).Click += this.QuickSettingsButton_Click;
                }
                break;
            case 120: // MainWindow.xaml line 39
                {
                    this.FileCommandsFlyout = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CommandBarFlyout>(target);
                }
                break;
            case 121: // MainWindow.xaml line 40
                {
                    this.FlyoutOpenButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutOpenButton).Click += this.FlyoutOpenButton_Click;
                }
                break;
            case 122: // MainWindow.xaml line 41
                {
                    this.FlyoutCopyButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutCopyButton).Click += this.FlyoutCopyButton_Click;
                }
                break;
            case 123: // MainWindow.xaml line 42
                {
                    this.FlyoutPreviewButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutPreviewButton).Click += this.DetailsPanePreviewButton_Click;
                }
                break;
            case 124: // MainWindow.xaml line 43
                {
                    this.FlyoutRotateButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutRotateButton).Click += this.DetailsPaneRotateButton_Click;
                }
                break;
            case 125: // MainWindow.xaml line 45
                {
                    this.FlyoutOpenButtonSec = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutOpenButtonSec).Click += this.FlyoutOpenButton_Click;
                }
                break;
            case 126: // MainWindow.xaml line 46
                {
                    this.FlyoutCopyButtonSec = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutCopyButtonSec).Click += this.FlyoutCopyButton_Click;
                }
                break;
            case 127: // MainWindow.xaml line 47
                {
                    this.FlyoutPreviewButtonSec = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutPreviewButtonSec).Click += this.DetailsPanePreviewButton_Click;
                }
                break;
            case 128: // MainWindow.xaml line 48
                {
                    this.FlyoutRotateButtonSec = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutRotateButtonSec).Click += this.DetailsPaneRotateButton_Click;
                }
                break;
            case 129: // MainWindow.xaml line 50
                {
                    this.FlyoutOpenWithButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutOpenWithButton).Click += this.DetailsPaneOpenWithButton_Click;
                }
                break;
            case 130: // MainWindow.xaml line 51
                {
                    this.FlyoutRevealButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutRevealButton).Click += this.FlyoutRevealButton_Click;
                }
                break;
            case 131: // MainWindow.xaml line 52
                {
                    this.FlyoutSelectButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutSelectButton).Click += this.FlyoutSelectButton_Click;
                }
                break;
            case 132: // MainWindow.xaml line 53
                {
                    this.FlyoutDeleteButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)this.FlyoutDeleteButton).Click += this.FileDeleteButton_Click;
                }
                break;
            case 133: // MainWindow.xaml line 61
                {
                    this.PinnedExpanderBackgroundRectangle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Rectangle>(target);
                }
                break;
            case 134: // MainWindow.xaml line 62
                {
                    this.PinnedFilesExpander = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Expander>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Expander)this.PinnedFilesExpander).DragOver += this.PinnedPivotSection_DragOver;
                    ((global::Microsoft.UI.Xaml.Controls.Expander)this.PinnedFilesExpander).Drop += this.PinnedPivotSection_Drop;
                    ((global::Microsoft.UI.Xaml.Controls.Expander)this.PinnedFilesExpander).Expanding += this.Expander_Expanding;
                    ((global::Microsoft.UI.Xaml.Controls.Expander)this.PinnedFilesExpander).Collapsed += this.PinnedFilesExpander_Collapsed;
                }
                break;
            case 135: // MainWindow.xaml line 141
                {
                    this.regularFileGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 136: // MainWindow.xaml line 145
                {
                    this.ContentBackgroundRectangle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Rectangle>(target);
                }
                break;
            case 137: // MainWindow.xaml line 146
                {
                    this.regularFileListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).SelectionChanged += this.fileListView_SelectionChanged;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).DoubleTapped += this.regularFileListView_DoubleTapped;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).RightTapped += this.fileListView_RightTapped;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).DragItemsStarting += this.fileListView_DragItemsStarting;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).DragItemsCompleted += this.regularFileListView_DragItemsCompleted;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.regularFileListView).Tapped += this.regularFileListView_Tapped;
                }
                break;
            case 142: // MainWindow.xaml line 78
                {
                    this.WinHelloWaitingIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 143: // MainWindow.xaml line 82
                {
                    this.NoPinnedFilesTextBlock = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 144: // MainWindow.xaml line 83
                {
                    this.NoPinnedFolderStackpanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 145: // MainWindow.xaml line 87
                {
                    this.pinnedFileGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 146: // MainWindow.xaml line 89
                {
                    this.pinnedFileListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.GridView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.pinnedFileListView).SelectionChanged += this.fileListView_SelectionChanged;
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.pinnedFileListView).DoubleTapped += this.regularFileListView_DoubleTapped;
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.pinnedFileListView).RightTapped += this.fileListView_RightTapped;
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.pinnedFileListView).DragItemsStarting += this.fileListView_DragItemsStarting;
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.pinnedFileListView).DragItemsCompleted += this.pinnedFileListView_DragItemsCompleted;
                }
                break;
            case 152: // MainWindow.xaml line 112
                {
                    global::Microsoft.UI.Xaml.Controls.Button element152 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element152).Click += this.DeletePinnedItemConfirmationButton_Click;
                }
                break;
            case 153: // MainWindow.xaml line 84
                {
                    this.NoPinnedFolderTextBlock = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 154: // MainWindow.xaml line 85
                {
                    this.PickPinnedFolderHyperlinkButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.HyperlinkButton)this.PickPinnedFolderHyperlinkButton).Click += this.PickPinnedFolderHyperlinkButton_Click;
                }
                break;
            case 155: // MainWindow.xaml line 79
                {
                    this.WinHelloProgressRing = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressRing>(target);
                }
                break;
            case 156: // MainWindow.xaml line 21
                {
                    this.ParallaxImage = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainWindow.xaml line 2
                {                    
                    global::WinUIEx.WindowEx element1 = (global::WinUIEx.WindowEx)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            }
            return returnValue;
        }
    }
}

